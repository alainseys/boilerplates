---
# CREATE NAMESPACE
apiVersion: v1
kind: Namespace
metadata:
  name: webserver-01
---
# CREATE SERVER nginx (Deployment)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-php
  namespace: webserver-01
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-php
  template:
    metadata:
      labels:
        app: nginx-php
    spec:
      containers:
        - name: nginx
          image: nginx:alpine
          ports:
            - containerPort: 80
            - containerPort: 443
          volumeMounts:
            - name: shared-storage
              mountPath: "/usr/share/nginx/html"
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
            - name: ssl-certs
              mountPath: /etc/nginx/ssl
              readOnly: true
        - name: php-fpm
          image: php:8.2-fpm
          volumeMounts:
            - name: shared-storage
              mountPath: "/usr/share/nginx/html"
      volumes:
        - name: shared-storage
          persistentVolumeClaim:
            claimName: shared-pvc
        - name: nginx-config
          configMap:
            name: nginx-config
        - name: ssl-certs
          secret:
            secretName: wildcard-cert-secret
---
# ATTACH CONFIG
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: webserver-01
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;

        root /usr/share/nginx/html;
        index index.php index.html index.htm;
        location / {
            try_files $uri $uri/ /index.php?$query_string;
        }

        location ~ \.php$ {
            include fastcgi_params;
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        }

        error_page 497 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        server_name localhost;

        ssl_certificate /etc/nginx/ssl/tls.crt;
        ssl_certificate_key /etc/nginx/ssl/tls.key;

        root /usr/share/nginx/html;
        index index.php index.html index.htm;

        location / {
            try_files $uri $uri/ /index.php?$query_string;
        }

        location ~ \.php$ {
            include fastcgi_params;
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_index index.php;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        }
    }
---
# CREATE SERVICE NGINX
apiVersion: v1
kind: Service
metadata:
  name: nginx-php
  namespace: webserver-01
spec:
  selector:
    app: nginx-php
  ports:
    - name: http
      port: 80
      targetPort: 80
    - name: https
      port: 443
      targetPort: 443
  type: LoadBalancer
---
# CREATE INGRESS ROUTE FOR NGINX
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-php-ingress
  namespace: webserver-01
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - "*.vanmarcke.be"  # Replace with your wildcard domain
    secretName: wildcard-cert-secret
  rules:
  - host: "vanmarcke.be"  # Replace with your actual domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-php
            port:
              number: 80
---
# CREATE PV (Persistent volume)
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs-volume
  namespace: webserver-01
spec:
  accessModes:
    - ReadWriteMany
  capacity:
    storage: 5Gi
  storageClassName: ""
  nfs:
    server: 172.27.235.105
    path: /srv/nfs/kubedata
    readOnly: false
---
# CREATE PVC (Persistent Volume Claim)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: shared-pvc
  namespace: webserver-01
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
  storageClassName: ""
---

